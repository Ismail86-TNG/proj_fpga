library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- Utilisé pour to_unsigned

entity vga_sync is
    port(
        clk     : in  std_logic;
        reset   : in  std_logic;
        hsync   : out std_logic;
        vsync   : out std_logic;
        hpos    : out std_logic_vector(9 downto 0);  -- Position horizontale du pixel (max 1024)
        vpos    : out std_logic_vector(9 downto 0);  -- Position verticale du pixel (max 1024)
        video_on: out std_logic                      -- Indicateur de zone vidéo active
    );
end vga_sync;

architecture Behavioral of vga_sync is
 -- Constantes VGA pour 640x480 @ 60Hz
    constant H_DISPLAY    : integer := 640;   -- Pixels affichables
    constant H_FRONT_PORCH: integer := 16;    -- Front Porch horizontal
    constant H_SYNC_PULSE : integer := 96;    -- Pulse de synchro horizontal
    constant H_BACK_PORCH : integer := 48;    -- Back Porch horizontal
    constant H_TOTAL      : integer := 800;   -- Total horizontal (ligne complète)

    constant V_DISPLAY    : integer := 480;   -- Pixels affichables
    constant V_FRONT_PORCH: integer := 10;    -- Front Porch vertical
    constant V_SYNC_PULSE : integer := 2;     -- Pulse de synchro vertical
    constant V_BACK_PORCH : integer := 33;    -- Back Porch vertical
    constant V_TOTAL      : integer := 525;   -- Total vertical (trame complète)


    signal h_counter : integer range 0 to H_TOTAL-1 := 0;
    signal v_counter : integer range 0 to V_TOTAL-1 := 0;

    -- Signal pour l'horloge divisée par 2
    signal clk_div2 : std_logic := '0';

begin

    -- Diviseur d'horloge : divise la fréquence par 2
    process(clk)
    begin
        if rising_edge(clk) then
            if reset = '1' then
                clk_div2 <= '0';
            else
                clk_div2 <= not clk_div2;
            end if;
        end if;
    end process;

    -- Synchronisation horizontale
    process(clk_div2)
    begin
        if rising_edge(clk_div2) then
            if reset = '1' then
                h_counter <= 0;
            elsif h_counter = H_TOTAL-1 then
                h_counter <= 0;
            else
                h_counter <= h_counter + 1;
            end if;
        end if;
    end process;

    -- Synchronisation verticale
    process(clk_div2)
    begin
        if rising_edge(clk_div2) then
            if reset = '1' then
                v_counter <= 0;
            elsif h_counter = H_TOTAL-1 then
                if v_counter = V_TOTAL-1 then
                    v_counter <= 0;
                else
                    v_counter <= v_counter + 1;
                end if;
            end if;
        end if;
    end process;

    -- Génération des signaux de synchronisation horizontale et verticale
    hsync <= '0' when (h_counter >= H_DISPLAY + H_FRONT_PORCH) and (h_counter < H_DISPLAY + H_FRONT_PORCH + H_SYNC_PULSE) else '1';
    vsync <= '0' when (v_counter >= V_DISPLAY + V_FRONT_PORCH) and (v_counter < V_DISPLAY + V_FRONT_PORCH + V_SYNC_PULSE) else '1';

    -- Assignation des positions actuelles du pixel
    hpos <= std_logic_vector(to_unsigned(h_counter, 10));  -- Conversion de h_counter en unsigned
    vpos <= std_logic_vector(to_unsigned(v_counter, 10));  -- Conversion de v_counter en unsigned

    -- Indiquer si la zone vidéo est active
    video_on <= '1' when (h_counter < H_DISPLAY and v_counter < V_DISPLAY) else '0';

end Behavioral;
